import asyncio
import logging
import sys
import os
import time
import moviepy as mp

from connect import TOKEN, model
from aioclass import VoiceState, AudioState, VideoState

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from pydub import AudioSegment


dp = Dispatcher()
logging.basicConfig(level=logging.INFO)
MAX_FILE_SIZE = 500 * 1024 * 1024

@dp.message(Command("start"))
async def command_start(message: Message):
    user_name = message.from_user.username or "–ë–µ–∑ –ò–º–µ–Ω–∏"
    await message.answer(f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\nüë§ {user_name}!\nüìù –ù–∞–ø–∏—à–∏—Ç–µ /list —á—Ç–æ –±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã!")


@dp.message(Command("list"))
async def list_command(message: Message):
    await message.answer(f"–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
                         f"üé§ /voice - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!\n"
                         f"üé∂ /audio - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –º—É–∑—ã–∫–∏!\n"
                         f"üé¨ /video - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏ –∏–∑ –≤–∏–¥–µ–æ!")


@dp.message(Command("voice"))
async def voice_command(message: Message, state: FSMContext):
    await message.answer("üé§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await state.set_state(VoiceState.waiting_for_voice)


@dp.message(VoiceState.waiting_for_voice, F.voice)
async def handle_voice(message: Message, state: FSMContext):

    progress_message = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

    file_id = message.voice.file_id
    file = await message.bot.get_file(file_id)
    file_path = file.file_path
    downloaded_file = await message.bot.download_file(file_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    await message.answer("üíæ LOG: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª...")

    temp_file = "temp_voice.mp3"
    with open(temp_file, "wb") as f:
        f.write(downloaded_file.read())

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ WAV
    await message.answer("üîÑ LOG: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞...")
    audio = AudioSegment.from_file(temp_file)
    wav_file = "temp_voice.wav"
    audio.export(wav_file, format="wav")

    # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    start_time = time.time()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    while True:
        elapsed_time = int(time.time() - start_time)
        await progress_message.edit_text(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞... {elapsed_time} —Å–µ–∫.")
        time.sleep(1)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
        if elapsed_time > 1:  # –ü—Ä–∏–º–µ—Ä: —ç–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            break


    # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    await message.answer("üîç LOG: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...")
    result = model.transcribe(wav_file)
    text = result["text"]

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    await message.answer("üóëÔ∏è LOG: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    os.remove(temp_file)
    os.remove(wav_file)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    total_time = int(time.time() - start_time)
    if text.strip():
        await progress_message.edit_text(
            f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{text}\n\n‚è±Ô∏è –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {total_time} —Å–µ–∫."
        )
    else:
        await progress_message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç.\n\n‚è±Ô∏è –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {total_time} —Å–µ–∫."
        )
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@dp.message(Command("audio"))
async def audio_command(message: Message, state: FSMContext):
    await message.answer("üé∂ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).")
    await state.set_state(AudioState.waiting_for_audio)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
@dp.message(AudioState.waiting_for_audio, F.audio)
async def handle_audio(message: Message, state: FSMContext):

    progress_message = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    file_id = message.audio.file_id
    file = await message.bot.get_file(file_id)
    file_path = file.file_path
    downloaded_file = await message.bot.download_file(file_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    await message.answer("üíæ LOG: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª...")
    temp_file = "temp_audio.mp3"
    with open(temp_file, "wb") as f:
        f.write(downloaded_file.read())

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ WAV
    await message.answer("üîÑ LOG: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞...")
    audio = AudioSegment.from_file(temp_file)
    wav_file = "temp_audio.wav"
    audio.export(wav_file, format="wav")

    # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    start_time = time.time()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    while True:
        elapsed_time = int(time.time() - start_time)
        await progress_message.edit_text(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞... {elapsed_time} —Å–µ–∫.")
        time.sleep(1)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
        if elapsed_time > 1:  # –ü—Ä–∏–º–µ—Ä: —ç–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            break

    # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    await message.answer("üîç LOG: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...")
    result = model.transcribe(wav_file)
    text = result["text"]

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    await message.answer("üóëÔ∏è LOG: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    os.remove(temp_file)
    os.remove(wav_file)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    total_time = int(time.time() - start_time)
    if text.strip():
        await progress_message.edit_text(
            f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{text}\n\n‚è±Ô∏è –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {total_time} —Å–µ–∫."
        )
    else:
        await progress_message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç.\n\n‚è±Ô∏è –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {total_time} —Å–µ–∫."
        )
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@dp.message(Command("video"))
async def video_command(message: Message, state: FSMContext):
    await message.answer("üé¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª.")
    await state.set_state(VideoState.waiting_for_video)


@dp.message(VideoState.waiting_for_video, F.video)
async def handled_video(message: Message, state: FSMContext):

    progress_message = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ...")

    # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª
    file_id = message.video.file_id
    file = await message.bot.get_file(file_id)
    file_path = file.file_path
    downloaded_file = await message.bot.download_file(file_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    await message.answer("üíæ LOG: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª...")
    temp_video = "temp_video.mp4"
    with open(temp_video, "wb") as f:
        f.write(downloaded_file.read())

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –∏–∑ –≤–∏–¥–µ–æ
    audio_file = "temp_audio.mp3"
    try:
        video_clip = mp.VideoFileClip(temp_video)  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
        video_clip.audio.write_audiofile(audio_file)  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ
    finally:
        video_clip.close()  # –Ø–≤–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç VideoFileClip

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ WAV
    await message.answer("üîÑ LOG: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞...")
    audio = AudioSegment.from_file(audio_file)
    wav_file = "temp_audio.wav"
    audio.export(wav_file, format="wav")

    # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    start_time = time.time()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    while True:
        elapsed_time = int(time.time() - start_time)
        await progress_message.edit_text(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞... {elapsed_time} —Å–µ–∫.")
        time.sleep(1)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
        if elapsed_time > 1:  # –ü—Ä–∏–º–µ—Ä: —ç–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            break

    # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    await message.answer("üîç LOG: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...")
    result = model.transcribe(wav_file)
    text = result["text"]

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    await message.answer("üóëÔ∏è LOG: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    os.remove(temp_video)
    os.remove(audio_file)
    os.remove(wav_file)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    total_time = int(time.time() - start_time)
    if text.strip():
        await progress_message.edit_text(
            f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{text}\n\n‚è±Ô∏è –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {total_time} —Å–µ–∫."
        )
    else:
        await progress_message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç.\n\n‚è±Ô∏è –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {total_time} —Å–µ–∫."
        )
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


async def main():
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
