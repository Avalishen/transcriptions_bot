import asyncio
import logging
import sys
import os
import time
import moviepy as mp
import ffmpeg

from connect import TOKEN, model
from aioclass import VoiceState, AudioState, VideoState, VideoMessageState

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command, StateFilter
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from pydub import AudioSegment


dp = Dispatcher()
logging.basicConfig(level=logging.INFO)
MAX_FILE_SIZE = 2 * 1024 * 1024 # 2 –ú–ë

@dp.message(Command("start"))
async def command_start(message: Message):
    user_name = message.from_user.username or "–ë–µ–∑ –ò–º–µ–Ω–∏"
    await message.answer(f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\nüë§ {user_name}!\nüìù –ù–∞–ø–∏—à–∏—Ç–µ /list —á—Ç–æ –±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã!")


@dp.message(Command("list"))
async def list_command(message: Message):
    await message.answer(f"–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
                         f"üé§ /voice - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!\n"
                         f"üé∂ /audio - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –º—É–∑—ã–∫–∏!\n"
                         f"üé¨ /video - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏ –∏–∑ –≤–∏–¥–µ–æ!\n"
                         f"üé• /video_message - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏ –∏–∑ –∫—Ä—É–∂–∫–æ–≤ Telegram!")


@dp.message(Command("voice"))
async def voice_command(message: Message, state: FSMContext):
    await message.answer("üé§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await state.set_state(VoiceState.waiting_for_voice)


@dp.message(VoiceState.waiting_for_voice, F.voice)
async def handle_voice(message: Message, state: FSMContext):
    if message.voice.file_size > MAX_FILE_SIZE:
        await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5 –ú–ë.")
        return

    progress_message = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

    log_message = []

    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        log_download_file = await message.answer("‚¨áÔ∏è LOG: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...")
        log_message.append(log_download_file.message_id)
        file_id = message.voice.file_id
        file = await message.bot.get_file(file_id)
        file_path = file.file_path
        downloaded_file = await message.bot.download_file(file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        log_saving_file = await message.answer("üíæ LOG: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª...")
        log_message.append(log_saving_file.message_id)
        temp_file = "temp_voice.mp3"
        with open(temp_file, "wb") as f:
            f.write(downloaded_file.read())

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ WAV
        log_file_conversion = await message.answer("üîÑ LOG: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞...")
        log_message.append(log_file_conversion.message_id)
        audio = AudioSegment.from_file(temp_file)
        wav_file = "temp_voice.wav"
        audio.export(wav_file, format="wav")

        # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
        start_time = time.time()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        while True:
            elapsed_time = int(time.time() - start_time)
            await progress_message.edit_text(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞... {elapsed_time} —Å–µ–∫.")
            time.sleep(1)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
            if elapsed_time > 1:  # –ü—Ä–∏–º–µ—Ä: —ç–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                break


        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        log_text_recognition = await message.answer("üîç LOG: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...")
        log_message.append(log_text_recognition.message_id)
        result = model.transcribe(wav_file)
        text = result["text"]

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        log_deleting_files = await message.answer("üóëÔ∏è LOG: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        log_message.append(log_deleting_files.message_id)
        os.remove(temp_file)
        os.remove(wav_file)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        total_time = int(time.time() - start_time)
        if text.strip():
            await progress_message.edit_text(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{text}\n\n‚è±Ô∏è –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {total_time} —Å–µ–∫.")
        else:
            await progress_message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç.\n\n‚è±Ô∏è –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {total_time} —Å–µ–∫.")

    except Exception as e:
        await progress_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    finally:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã
        if os.path.exists("temp_voice.mp3"):
            os.remove("temp_voice.mp3")
        if os.path.exists("temp_voice.wav"):
            os.remove("temp_voice.wav")

        for msg_id in log_message:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception:
                pass
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@dp.message(Command("audio"))
async def audio_command(message: Message, state: FSMContext):
    await message.answer("üé∂ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).")
    await state.set_state(AudioState.waiting_for_audio)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
@dp.message(AudioState.waiting_for_audio, F.audio)
async def handle_audio(message: Message, state: FSMContext):
    if message.audio.file_size > MAX_FILE_SIZE:
        await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5 –ú–ë.")
        return

    progress_message = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

    log_message = []

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    try:
        log_download_file = await message.answer("‚¨áÔ∏è LOG: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...")
        log_message.append(log_download_file.message_id)
        file_id = message.audio.file_id
        file = await message.bot.get_file(file_id)
        file_path = file.file_path
        downloaded_file = await message.bot.download_file(file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        log_saving_file = await message.answer("üíæ LOG: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª...")
        log_message.append(log_saving_file.message_id)
        temp_file = "temp_audio.mp3"
        with open(temp_file, "wb") as f:
            f.write(downloaded_file.read())

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ WAV
        log_file_conversion = await message.answer("üîÑ LOG: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞...")
        log_message.append(log_file_conversion.message_id)
        audio = AudioSegment.from_file(temp_file)
        wav_file = "temp_audio.wav"
        audio.export(wav_file, format="wav")

        # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
        start_time = time.time()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        while True:
            elapsed_time = int(time.time() - start_time)
            await progress_message.edit_text(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞... {elapsed_time} —Å–µ–∫.")
            time.sleep(1)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
            if elapsed_time > 1:  # –ü—Ä–∏–º–µ—Ä: —ç–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                break

        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        log_text_recognition = await message.answer("üîç LOG: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...")
        log_message.append(log_text_recognition.message_id)
        result = model.transcribe(wav_file)
        text = result["text"]

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        log_deleting_files = await message.answer("üóëÔ∏è LOG: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        log_message.append(log_deleting_files.message_id)
        os.remove(temp_file)
        os.remove(wav_file)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        total_time = int(time.time() - start_time)
        if text.strip():
            await progress_message.edit_text(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{text}\n\n‚è±Ô∏è –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {total_time} —Å–µ–∫.")
        else:
            await progress_message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç.\n\n‚è±Ô∏è –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {total_time} —Å–µ–∫.")

    except Exception as e:
        await progress_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    finally:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã
        if os.path.exists("temp_audio.mp3"):
            os.remove("temp_audio.mp3")
        if os.path.exists("temp_audio.wav"):
            os.remove("temp_audio.wav")

        for msg_id in log_message:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception:
                pass
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@dp.message(Command("video"))
async def video_command(message: Message, state: FSMContext):
    await message.answer("üé¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª.")
    await state.set_state(VideoState.waiting_for_video)


@dp.message(VideoState.waiting_for_video, F.video)
async def handled_video(message: Message, state: FSMContext):
    if message.video.file_size > MAX_FILE_SIZE:
        await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5 –ú–ë.")
        return

    progress_message = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ...")

    log_message = []

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª
        log_download_file = await message.answer("‚¨áÔ∏è LOG: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...")
        log_message.append(log_download_file.message_id)
        file_id = message.video.file_id
        file = await message.bot.get_file(file_id)
        file_path = file.file_path
        downloaded_file = await message.bot.download_file(file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        log_saving_file = await message.answer("üíæ LOG: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª...")
        log_message.append(log_saving_file.message_id)
        temp_video = "temp_video.mp4"
        with open(temp_video, "wb") as f:
            f.write(downloaded_file.read())

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –∏–∑ –≤–∏–¥–µ–æ
        audio_file = "temp_audio.mp3"
        try:
            video_clip = mp.VideoFileClip(temp_video)
            video_clip.audio.write_audiofile(audio_file)
        finally:
            video_clip.close()

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ WAV
        log_file_conversion = await message.answer("üîÑ LOG: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞...")
        log_message.append(log_file_conversion.message_id)
        audio = AudioSegment.from_file(audio_file)
        wav_file = "temp_audio.wav"
        audio.export(wav_file, format="wav")

        # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
        start_time = time.time()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        while True:
            elapsed_time = int(time.time() - start_time)
            await progress_message.edit_text(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞... {elapsed_time} —Å–µ–∫.")
            time.sleep(1)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
            if elapsed_time > 1:  # –ü—Ä–∏–º–µ—Ä: —ç–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                break

        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Whisper
        log_text_recognition = await message.answer("üîç LOG: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...")
        log_message.append(log_text_recognition.message_id)
        result = model.transcribe(wav_file)
        text = result["text"]

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        log_deleting_files = await message.answer("üóëÔ∏è LOG: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        log_message.append(log_deleting_files.message_id)
        os.remove(temp_video)
        os.remove(audio_file)
        os.remove(wav_file)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        total_time = int(time.time() - start_time)
        if text.strip():
            await progress_message.edit_text(
                f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{text}\n\n‚è±Ô∏è –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {total_time} —Å–µ–∫.")
        else:
            await progress_message.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç.\n\n‚è±Ô∏è –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {total_time} —Å–µ–∫.")

    except Exception as e:
        await progress_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    finally:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã
        if os.path.exists("temp_video.mp4"):
            os.remove("temp_video.mp4")
        if os.path.exists("temp_audio.mp3"):
            os.remove("temp_audio.mp3")
        if os.path.exists("temp_audio.wav"):
            os.remove("temp_audio.wav")

        for msg_id in log_message:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception:
                pass
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ
def extract_audio(input_file, output_file):
    try:
        (
            ffmpeg
            .input(input_file)
            .output(output_file, format="mp3")
            .run(overwrite_output=True, capture_stdout=True, capture_stderr=True)
        )
    except ffmpeg._run.Error as e:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg._run.Error
        logging.error(f"–û—à–∏–±–∫–∞ FFmpeg: {e.stderr.decode()}")
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ.")


@dp.message(Command("video_message"))
async def video_message_command(message: Message, state: FSMContext):
    await message.answer("üé• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—Ä—É–∂–æ–∫ (–≤–∏–¥–µ–æ–∑–∞–º–µ—Ç–∫—É).")
    await state.set_state("waiting_for_video_message")


@dp.message(StateFilter("waiting_for_video_message"), F.video_note)
async def handled_video_message(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if message.video_note.file_size > MAX_FILE_SIZE:
        file_size_mb = message.video_note.file_size / (1024 * 1024)
        await message.answer(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –†–∞–∑–º–µ—Ä: {file_size_mb:.2f} –ú–ë. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5 –ú–ë.")
        return

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    progress_message = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫—Ä—É–∂–∫–∞...")

    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏–π
    log_message = []

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
        BASE_DIR = os.path.dirname(os.path.abspath(__file__))
        temp_video = os.path.join(BASE_DIR, "temp_video_note.mp4")
        audio_file = os.path.join(BASE_DIR, "temp_audio.mp3")
        wav_file = os.path.join(BASE_DIR, "temp_audio.wav")

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫—Ä—É–∂–∫–∞
        log_download_file = await message.answer("‚¨áÔ∏è LOG: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...")
        log_message.append(log_download_file.message_id)
        file_id = message.video_note.file_id
        file = await message.bot.get_file(file_id)
        file_path = file.file_path
        downloaded_file = await message.bot.download_file(file_path)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        log_saving_file = await message.answer("üíæ LOG: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª...")
        log_message.append(log_saving_file.message_id)
        with open(temp_video, "wb") as f:
            f.write(downloaded_file.read())

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –∏–∑ –≤–∏–¥–µ–æ
        log_extraction = await message.answer("üéµ LOG: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ...")
        log_message.append(log_extraction.message_id)
        extract_audio(temp_video, audio_file)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Å–æ–∑–¥–∞–Ω —Ñ–∞–π–ª
        if not os.path.exists(audio_file):
            raise FileNotFoundError(f"–§–∞–π–ª {audio_file} –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ WAV
        log_conversion = await message.answer("üîÑ LOG: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞...")
        log_message.append(log_conversion.message_id)
        audio = AudioSegment.from_file(audio_file)
        audio.export(wav_file, format="wav")

        # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
        start_time = time.time()

        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Whisper
        log_recognition = await message.answer("üîç LOG: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...")
        log_message.append(log_recognition.message_id)
        result = model.transcribe(wav_file)
        text = result["text"]

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        log_deletion = await message.answer("üóëÔ∏è LOG: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        log_message.append(log_deletion.message_id)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        total_time = int(time.time() - start_time)
        if text.strip():
            await progress_message.edit_text(
                f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{text}\n\n‚è±Ô∏è –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {total_time} —Å–µ–∫."
            )
        else:
            await progress_message.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç.\n\n‚è±Ô∏è –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {total_time} —Å–µ–∫."
            )

    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await progress_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    finally:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã
        for file in [temp_video, audio_file, wav_file]:
            if os.path.exists(file):
                os.remove(file)

        # –£–¥–∞–ª—è–µ–º –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏—è
        for msg_id in log_message:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception:
                pass

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def unknown_message(message: Message):
    await message.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.")


async def main():
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
